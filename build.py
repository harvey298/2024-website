import toml, requests

WORDS = requests.get("https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt").text.split("\n")

buf = []
for word in WORDS:
    if len(word) > 2:
        buf.append(word.replace("\n","").replace("\r",""))

WORDS = buf

def pretty(word: str, itr: int = 0) -> str:
    global WORDS
    if word.__contains__(".") and itr == 0:
        segments = word.split(".")
        a = segments[0]
        b = segments[1]
        if WORDS.__contains__(a) and len(a) > 2:
            a = a.title()
        if WORDS.__contains__(b) and len(b) > 2:
            b = b.title()
        return a + "." + b
    elif word.__contains__("/") and itr == 1:
        segments = word.split("/")
        a = segments[0]
        b = segments[1]
        if WORDS.__contains__(a) and len(a) > 2:
            a = a.title()
        if WORDS.__contains__(b) and len(b) > 2:
            b = b.title()
        return pretty(a + "/" + b, itr + 1)
    elif word.__contains__("-") and itr == 2:
        segments = word.split("-")
        a = segments[0]
        b = segments[1]
        if WORDS.__contains__(a) and len(a) > 2:
            a = a.title()
        if WORDS.__contains__(b) and len(b) > 2:
            b = b.title()
        return pretty(a + "-" + b, itr + 1)
    elif itr == 3:
        return word.title()            
    else:
        return pretty(word, itr + 1)

data_to_write = """// Do not edit this file. Edit projects.toml instead.

const PROJECTS = [
    ${data}
]

export function addProject(width_selector) {

    var contain = document.querySelector('.card');

    var footer = document.querySelector('footer');
    var buffer = "";
    var loops = 0;

    for (;;) {
    
        if (loops > 5) {
            width_selector = 1;
        }
        buffer = '<table><tr>';
        for (let i = 0; i < PROJECTS.length; i++) {

            if (i % width_selector === 0) {
                buffer += '</tr><tr>';
            }

            buffer += `${PROJECTS[i]}`;
        }

        buffer += '</tr></table>';
        contain.innerHTML = buffer;

        if (loops > 5) { break; }

        // var screenWidth = window.screen.width;

        if (contain.clientWidth > footer.scrollWidth-100) {
            width_selector--;
        } else { break }

        loops++;
    }

}"""

with open("./projects.toml", "r") as f:
    projects = toml.load(f)
    buffer = "`"
    for (i, project) in enumerate(projects["project"]):
        
        name = project["name"]
        description = project["description"]
        source_status = project["source_status"]
        if source_status == "open":
            try:
                source_status = f'<a class="badge open-source" href="{project["src"]}" target="_blank">Open Source</a>'
            except KeyError:
                source_status = '<div class="badge open-source">Open Source</div>'
        elif source_status == "planned":
            source_status = '<div class="badge planned-open-source">Planned to be Open Source</div>'
        else:
            source_status = '<div class="badge closed-source">Closed Source</div>'

        dev_status = project["dev_status"]
        if dev_status == "stable":
            dev_status = '<div class="badge stable">Stable</div>'
        elif dev_status == "beta":
            dev_status = '<div class="badge beta">Beta</div>'
        else:
            dev_status = '<div class="badge alpha">Alpha</div>'

        maintenance = project["maintenance"]
        if maintenance == "active":
            maintenance = '<div class="badge active">Active Development</div>'
        elif maintenance == "maintenance":
            maintenance = '<div class="badge maintenance">In Maintenance</div>'
        else:
            maintenance = '<div class="badge deprecated">Deprecated</div>'

        languages = ""

        for lang in project["languages"]:
            with open("./projects/project_styles.css", "r") as f:
                if f.read().__contains__(f".{lang}"):
                    languages += f'<div class="badge {lang}">Language: {lang}</div>'
                else: 
                    languages += f'<div class="badge blank-language">Language: {lang}</div>'

        tools = ""

        for tool in project["tools"]:
            if tool == "vite":
                tools += '<div class="badge framework">Framework: Vite</div>'
            elif tool == "tauri":
                tools += '<div class="badge framework">Framework: tauri</div>'
            elif tool == "wolfram/miquliz":
                tools += '<div class="badge ai">Ai: Miquliz</div>'
            else:
                tools += '<div class="badge framework">Tool: ' + tool + '</div>'

        buffer += f"""<td>
        <a href="project?p={name.replace(" ", "_").lower().replace("/", "")}">
            <div class="project">
                <h2 class="project-title"><b>{pretty(name)}</b></h2>
                <p>{description}.</p>{source_status} {dev_status} {maintenance} {languages} {tools}
            </div>
        </a></td>"""

        buffer += "`,`"


    buffer = buffer[:-1]
    data_to_write = data_to_write.replace("${data}", buffer)


with open("./projects/projects.js", "w+") as f:
    f.write(data_to_write)

with open("./404.html", "r") as src:
    with open("./projects/404.html", "w+") as dest:
        dest.write(src.read())

# Conversion to Hoover API project toml file
with open("./projects.toml", "r") as f:
    data = toml.load(f)

    output = {
        "default": {
            "data_path": "./data/default_project",
            "tag": []
        }
    }

    for project in data["project"]:
        # Collect the tags
        tags = []

        # Source Status
        source_status = project["source_status"]
        if source_status == "open":
            tags.append({
                "tag_type": "open_source",
                "classes": [
                    "badge", "open-source"
                ],
                "text": "Open Source"
            })
        elif source_status == "planned":
            tags.append({
                "tag_type": "planned",
                "classes": [
                    "badge", "planned-open-source"
                ],
                "text": "Planned to be Open Source"
            })
        else:
            tags.append({
                "tag_type": "closed_source",
                "classes": [
                    "badge", "closed-source"
                ],
                "text": "Closed Source"
            })
        
        # Dev Status
        dev_status = project["dev_status"]
        if dev_status == "stable":
            tags.append({
                "tag_type": "stable",
                "classes": [
                    "badge", "stable"
                ],
                "text": "Stable"
            })
        elif dev_status == "beta":
            tags.append({
                "tag_type": "beta",
                "classes": [
                    "badge", "beta"
                ],
                "text": "Beta"
            })
        else:
            tags.append({
                "tag_type": "alpha",
                "classes": [
                    "badge", "alpha"
                ],
                "text": "Alpha"
            })
        
        # Maintenance
        maintenance = project["maintenance"]
        if maintenance == "active":
            tags.append({
                "tag_type": "active",
                "classes": [
                    "badge", "active"
                ],
                "text": "Active Development"
            })
        elif maintenance == "maintenance":
            tags.append({
                "tag_type": "maintenance",
                "classes": [
                    "badge", "maintenance"
                ],
                "text": "In Maintenance"
            })
        else:
            tags.append({
                "tag_type": "deprecated",
                "classes": [
                    "badge", "deprecated"
                ],
                "text": "Deprecated"
            })

        # Languages
        for lang in project["languages"]:
            tags.append({
                "tag_type": "language",
                "classes": [
                    "badge", lang, "blank-language"
                ],
                "text": lang.replace("js", "javascript").title()
            })

        # Tools
        for tool in project["tools"]:
            tags.append({
                "tag_type": "framework",
                "classes": [
                    "badge", "framework", tool
                ],
                "text": tool
            })

        name = project["name"].replace(" ", "_").lower().replace("/", "")

        output.update({
            name: {
                "data_path": "./data/" + name,
                "tag": tags
            }

        })
    
    with open("./hoover_project.toml", "w+") as out:
        toml.dump(output, out)